What happens when you initialize a repository? Why do you need to do it?

You created a library for all your files, it can easily be accessed in through terminal
Also, you can commit your files.

Concept Map: init, add, staging area
We’ve introduced a few new concepts since we last revisited our concept map.
git init
git add: add to staging area
git status: checkout staging area
staging area
working directory


How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is a transition to repository. You can commit different amount of
files to the repository instead of all together.

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
git diff: without arguments compare working directory and the staging area
git diff --staged: compare staging area and the repository
git reset --hard: (irreversible)discard any changes in either the working directory or the staging area
git checkout master: to go back to the master branch
git branch: checkout what branch you have
git branch (argument): create a branch with name of the argument
git checkout --graph --oneline (argument) (argument) .. :
    checkout git status of different branches in oneline and graph
git checkout -b (new_branch_name): git branch (new_branch_name) + git checkout (new_branch_name)
git merge (branch_name) (branch_name): merge branch files
git show (commit ID): compare the code with its parent
git branch -d (branch_name): delete the branch reference

How can you use the staging area to make sure you have one commit per logical change?
- You don't commit until you change everything

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

- Experiments
- Create a different version
- New functions

It will help to not break the current master code.

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

How do the diagrams help you visualize the branch structure?
-List out all the branches of the structure

What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

- 1: Make two branches into one
     Keep all the commits in one branch

- 2: Easier to understand
